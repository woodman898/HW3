//Q1
#include <stdio.h>
#include <stdlib.h>
int main(int argc, const char **argv, const char **envp){
    DWORD *ptr = malloc(sizeof(DWORD)*8);
    ptr[7]=3;
    ptr[6]=5;
    ptr[5]=0;
    ptr[5]=ptr[7]*ptr[6]-(ptr[7]+(ptr[7]+ptr[7]/abs(ptr[7]))/2);        //do the caluation for x*y-(x+(x+x/|x|)/2)
    ptr[1]=ptr[5];
    printf("%d", ptr[1]);
}

//Q2
#include <stdio.h>
int main(){
    short int *list=[0x0C,0x0F, 0x0DD, 0x3, 0x1B0, 0x36, 0x10, 0x43];  //create a list with values
    short int max = 0;
    for(int a = 0; a = 7; a++){
        if(list[a]>max)
            max = list[a];
    }                                                                  //find out the largest value from these elements
    printf("%d", max);
}

//Q3
int main()
{
 int esp1ch = 0x64;
 int esp18h;
 int esp14h;
 int esp10h;
 int esp4;
 int eax,ebx,ecx,edx;
 while(esp1ch<=0x3E7){
   esp18h = 2^27-1-esp1ch/abs(esp1ch);
   ecx=esp18h*0x80000064 + esp1ch;
   esp14h =0x66666667/4-ecx/abs(ecx);
   esp10h=esp1ch-10*(0x66666667/4-esp1ch/abs(esp1ch));
   if(esp10h^3+esp14h^3+esp18h^3 == esp1ch){
      printf("%d",esp1ch);
      esp1ch++;
   }                                                                    //find every combo that satisify esp10h^3+esp14h^3+esp18h^3 == esp1ch
 }
 return 0;
}

//Q4
int main(){
    int m;
    int n[100];
    int o = 100;
    int p = 7;
    for(int i = 0; i < o; ++i)
        n[i] = i + 1;                                                       //create a matrix from 1 to 100 with null
    m = proc1(n, o, p);
    printf("%d\n", m);
    return 0;
}
int proc1 (int *a1, int a2, int a3){
    int x = 0;
    int y = 0;
    int z;
    int i;
    for (i = 0; i < a2; ++i){
        z = 1;
        while (z < a3){
            while (!a1[y]){
                y = (y+1)%a2;
                }
            ++z;
            y = (y+1)%a2;
        }
        while (!a1[y])
            y = (y+1)%a2;
        z = a1[y];
        a1[y] = 0;                                                          //set the value to 0 every 6 null
   }                                                                        //skip the value 0 and find out where the final step locate at
   return z;
}
